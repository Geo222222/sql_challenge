cd Desktop\assignment_6

remote repository url: github_url


git init
gid add . 
git  commit -m "Hello World Welcome to Module 9"
git remote add origin "github_url here""
git push -u origin main

SQL: 

CREATE TABLE departments (
    dept_no VARCHAR PRIMARY KEY,
    dept_name VARCHAR NOT NULL
);

CREATE TABLE titles (
    title_id VARCHAR PRIMARY KEY,
    title VARCHAR NOT NULL
);

CREATE TABLE employees (
    emp_no INT PRIMARY KEY,
    emp_title_id VARCHAR NOT NULL,
    birth_date DATE,
    first_name VARCHAR,
    last_name VARCHAR,
    sex CHAR,
    hire_date DATE,
    FOREIGN KEY (emp_title_id) REFERENCES titles(title_id)
);

CREATE TABLE salaries (
    emp_no INT,
    salary INT,
    PRIMARY KEY (emp_no),
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);

CREATE TABLE dept_emp (
    emp_no INT,
    dept_no VARCHAR,
    PRIMARY KEY (emp_no, dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no),
    FOREIGN KEY (dept_no) REFERENCES departments(dept_no)
);

CREATE TABLE dept_manager (
    dept_no VARCHAR,
    emp_no INT,
    PRIMARY KEY (dept_no, emp_no),
    FOREIGN KEY (dept_no) REFERENCES departments(dept_no),
    FOREIGN KEY (emp_no) REFERENCES employees(emp_no)
);

-----------------
-----------------
1. List the employee number. last name, first name, sex, and salary.

SELECT e.emp_no, e.last_name, e.first_name, e.sex, s.salary
FROM employees e
JOIN salaries s ON e.emp_no = s.emp_no;

2. List the first name, last name, and hire date for the employees who were hired in 1986.

SELECT first_name, last_name, hire_date
FROM employees
WHERE EXTRACT(YEAR FROM hire_date) = 1986;

3. List the manager of each department along with their department number, department name, employuee number, last name, and first name.

SELECT dm.dept_no, d.dept_name, dm.emp_no, e.last_name, e.first_name
FROM dept_manager dm
JOIN departments d ON dm.dept_no = d.dept_no
JOIN employees e ON dm.emp_no = e.emp_no;

4. List the department number for each employee along with that employee's employee number, last name, first name, and department name.

SELECT de.dept_no, de.emp_no, e.last_name, e.first_name, d.dept_name
FROM dept_emp de
JOIN employees e ON de.emp_no = e.emp_no
JOIN departments d ON de.dept_no = d.dept_no;

5. List first name, last name, and sex of each employee whose first name is Hercules and whose last name begins with the letter B.

SELECT first_name, last_name, sex
FROM employees
WHERE first_name = 'Hercules' AND last_name LIKE 'B%';

6. List each employee in the Sales department, including their employee number, last_name, and first_name. 

SELECT e.emp_no, e.last_name, e.first_name
FROM employees e
JOIN dept_emp de ON e.emp_no = de.emp_no
JOIN departments d ON de.dept_no = d.dept_no
WHERE d.dept_name = 'Sales';

7. List each employee in the Sales and Development departments, including their employee number, last name, first name, annd department name.

SELECT e.emp_no, e.last_name, e.first_name, d.dept_name
FROM employees e
JOIN dept_emp de ON e.emp_no = de.emp_no
JOIN departments d ON de.dept_no = d.dept_no
WHERE d.dept_name IN ('Sales', 'Development');

8. List the frequency counts, in descending order, of all the employees last name. 

SELECT last_name, COUNT(*) AS count
FROM employees
GROUP BY last_name
ORDER BY count DESC;


Analysis:

Primary Key:    A primary Key is a field or set of fields that uniquely indentifies each row in a table. 
                No, two rows in a table can have the same value for the primary key. It is essential for 
                ensuring data integriry and is also used to establish relationships between tables.
        ** In the 'departments' table  ('dept_no') serves as the primary key because each department number uniquely identifies a department

Foreign Key:    A Foreign Key is a field or set of fields in one table that uniquely identifies a row of another table or the same table. 
                The main purpose of a foreign key is to enfore referential integrirt, ensuring relationships between tables are consistent and that there is no orphan data. 
        ** In the 'employees' table, 'emp_title_id' is a foreign key that references 'title_id' from the "titles" table.  
           This ensures that every employee has a valid title defined from the 'titles' table. 

Relationships:
        Databases in SQL often contain multiple tables that are interrelated through foreign keys, forming relationships that can be one to one , one to many or many to many 
            One to One is when each row in tone database table is linked to 1(and only 1) row in another table. For example, if each employee had exactly one unique login credeital stored in a seperate table, 
            the relationship between the employees and credentials would be one to one. 

            One to many if when a row in one table can be linked to many rows in another table. For example, the 'departments' to 'dept_emp' relatinship is one to many since each department can have many employees.

            Many to many is when many rows in one table can be linked to many rows in another table. This is often implemented using a join table
            example: 'dept_emp" which joings 'employees' and 'departments'



CREATE TABLE departments (
    dept_no VARCHAR PRIMARY KEY,
    dept_name VARCHAR NOT NULL
)
**  department number is the primary key. It uniquely identifies
    each department
    department name is market as NOT NULL, ensuring that every 
    department must have a name.

CREATE TABLE titles (
    title_id VARCHAR PRIMARY KEY,
    title VARCHAR NOT NULL,
)
**  Each title ID is unique and each title must have a name.

CREATE TABLE employees (
    emp_no INT PRIMARY KEY,
    emp_title_id VARCHAR NOT NULL,
    birth_date DATE,
    first_name VAR CHAR,
    last_name VARCHAR,
    sex CHAR,
    hire_date DATE,
    FOREIGN KEY (emp_title_id) REFERENCES titles(title_id)
)
**  emp_no is the primary key because it uniquely identifies each employee.
    emp_title_id is a foreign key that ensures all employees have a valid title from the 'titles' table 

CREATE TABLE salaries (
    emp_no INT,
    salary INT,
    PRIMARY KEY (emp_no)
    FOREIGN KEY (emp_no) REFERENECS employee(emp_no)
)




